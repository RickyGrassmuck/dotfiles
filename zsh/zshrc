# Created by newuser for 5.3.1
# If you come from bash you might have to change your $PATH.
export PATH=/usr/local/opt/coreutils/libexec/gnubin:${HOME}/.python/bin:/usr/local/sbin:$HOME/.bin:${HOME}/.local/bin:/usr/local/opt/curl/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=${HOME}/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="alien"

if [ $(hostname | grep 'grassmucks.com') ]; then

	export ALIEN_THEME="green"

elif [[ $(hostname | grep -i 'Ricky-Grassmuck-Mini') ]]; then

	export ALIEN_THEME="blue"

else

	export ALIEN_THEME="red"

fi

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=~/.zsh_custom

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git git-prompt jsontools python thefuck zshreload jira httpie git-extras macmini)

source $ZSH/oh-my-zsh.sh

# User configuration

source ~/.config/r.grassmuck-openrc.sh

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vi'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Custom Exports
export NOTEDIR=~/Documents/Work/Tickets

####

# Custom Functions
#
function addhost() {
	ip="${1}"
	domains="${@:2}"
	echo "${ip} ${domains}" | sudo tee -a /etc/hosts > /dev/null
	cat /etc/hosts
}

function delhost() {
	domain=${1}
	if [[ ${domain} == *"localhost"* ]]; then
		echo "Please manually edit file to make changes to localhost"
		return
	fi

	if [[ -f $(which gsed) ]]; then
		SED='gsed'
	else
		SED='sed'
	fi

	sudo $SED -i "/${domain}/d" /etc/hosts
	cat /etc/hosts
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f ~/.iterm2_shell_integration.zsh ] && source ~/.iterm2_shell_integration.zsh

function gitraw() {
    URL="${1}"
    RAW_URL=$(echo ${URL} | gsed 's|github\.com|raw\.githubusercontent\.com|' | gsed 's|blob\/||')
    wget "${RAW_URL}"
}
alias http-h="http --all --follow -h"

function mknote() {
    if [[ -z ${1} ]]; then
        echo "Provide Note ID"
	return 1
    else

	if [[ ${1} == "-d" ]]; then
            if [[ ! -z ${2} ]]; then
		mkdir -v ${NOTEDIR}/${2} 
		export CURNOTE=${2} 
	    else
		echo "-d specified but no ticket number provided... Exiting"
		return 1
	    fi
    	else    
            mkdir ${NOTEDIR}/${1}
            /usr/local/bin/nvim ${NOTEDIR}/${1}/notes
            export CURNOTE=${1}
	fi
    fi
}

function cdnote() {
    if [[ -z ${1} ]]; then
	if [[ -z ${CURNOTE} ]]; then
            echo "Provide Note ID"
	    return 1
	else
	    NOTE=${CURNOTE}
        fi
    else
        NOTE=${1}
    fi

    if [[ -d ${NOTEDIR}/${NOTE} ]]; then
	cd "${NOTEDIR}/${NOTE}"
    else
	echo "Path [${NOTEDIR}/${NOTE}] does not exist..."
    fi
}

function get-ssl-exp() {
    local PORT=${2}
    local OPENSSL='/usr/local/Cellar/openssl/1.0.2o_2/bin/openssl'
    if [[ $PORT -lt 1 ]]; then
        echo "Invalid port: ${PORT}"
        echo "Using default of 443"
        PORT=443
    fi

    SSLINFO="$(echo | $OPENSSL s_client -connect "${1}:${PORT}" 2>/dev/null)"
    echo ${SSLINFO} | openssl x509 -noout -subject   
    echo ${SSLINFO} | openssl x509 -noout -issuer
    EXPIRE=$(echo ${SSLINFO} | openssl x509 -noout -dates | grep -i after | awk -F'=' '{print $2}')
    echo "Exipres: ${EXPIRE}"
    
    #echo -ne "${subject} ${issuer} ${expire}"

}

function get-sans() {
	local PORT=${2}
	local OPENSSL='/usr/local/Cellar/openssl/1.0.2o_2/bin/openssl'	
	if [[ $PORT -lt 1 ]]; then
		echo "Invalid port: ${PORT}"
		echo "Using default of 443"
		PORT=443
	fi

	local SANS=$(true | $OPENSSL s_client -connect "${1}:${PORT}" 2>&1 | $OPENSSL x509 -text -noout -certopt no_subject,no_header,no_version,no_serial,no_signame,no_validity,no_subject,no_issuer,no_pubkey,no_sigdump,no_aux | grep DNS | gsed -e 's/DNS\://g' -e 's/\, /\\\n/g' -e 's/^\s*//g' -e 's/\\//g' | sort)
	
	printf "\nSubject Alternative Names\n"
	printf "==========================\n"
	printf "${SANS}\n"
	printf "==========================\n\n"
}

function ocspcheck() {
	( DOMAIN=$1 ; echo | openssl s_client -connect $DOMAIN:443 -servername $DOMAIN -status <<<quit 2>&1 | egrep ' OCSP Response Status:|Response Type:|Cert Status:|OCSP response:' ) 
}

function t() {
	response=$(trans -b -t "${1}" "$(pbpaste)")
	echo "${response}" | pbcopy
	echo "Translation to ${1} added to clipboard"
}

function get-title() {
    echo ${1} | perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si'
}

# virtualenv
# export WORKON_HOME=~/Development/PycharmProjects/virtualenvs
# export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
# export PYTHONUSERBASE=~/.python
# source ${HOME}/.python/bin/virtualenvwrapper.sh

# pip zsh completion start
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}
compctl -K _pip_completion pip3
# pip zsh completion end

source ~/.zsh_plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
